// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.dnnl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.dnnl.global.dnnl.*;


/** \}
 <p>
 *  \addtogroup cpp_api_primitives Primitives
 *  \{
 <p>
 *  \addtogroup cpp_api_primitive_descriptors Primitive descriptors
 *  \{
 <p>
 *  The base class for all primitive descriptors. */
@Namespace("dnnl") @Properties(inherit = org.bytedeco.dnnl.presets.dnnl.class)
public class primitive_desc_base extends dnnl_primitive_desc_handle {
    static { Loader.load(); }

    
        public primitive_desc_base() { super((Pointer)null); allocate(); }
        private native void allocate();
        public primitive_desc_base(@Const @ByRef primitive_desc_base arg0) { super((Pointer)null); allocate(arg0); }
        private native void allocate(@Const @ByRef primitive_desc_base arg0);
        public primitive_desc_base(dnnl_primitive_desc t, @Cast("bool") boolean weak/*=false*/) { super((Pointer)null); allocate(t, weak); }
        private native void allocate(dnnl_primitive_desc t, @Cast("bool") boolean weak/*=false*/);
        public primitive_desc_base(dnnl_primitive_desc t) { super((Pointer)null); allocate(t); }
        private native void allocate(dnnl_primitive_desc t);
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public primitive_desc_base(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public primitive_desc_base(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public primitive_desc_base position(long position) {
        return (primitive_desc_base)super.position(position);
    }


    /** Returns the engine of the primitive descriptor. */
    public native @ByVal engine get_engine();

    /** Returns implementation name. */
    public native @Cast("const char*") BytePointer impl_info_str();

    /** Queries the memory::dim value (same as int64_t). */
    public native @Cast("dnnl::memory::dim") long query_s64(query q);
    public native @Cast("dnnl::memory::dim") long query_s64(@Cast("dnnl::query") int q);

    /** Queries and returns requested memory descriptor. */
    
    ///
    public native @ByVal memory.desc query_md(query what, int idx/*=0*/);
    public native @ByVal memory.desc query_md(query what);
    public native @ByVal memory.desc query_md(@Cast("dnnl::query") int what, int idx/*=0*/);
    public native @ByVal memory.desc query_md(@Cast("dnnl::query") int what);

    /** Queries scratchpad memory descriptor.
     * 
     *  @see \ref dev_guide_attributes_scratchpad
     *  Returns a zero_md if no scratchpad is required. */
    public native @ByVal memory.desc scratchpad_desc();

    /** Returns the engine that owns the scratchpad memory. */
    public native @ByVal engine scratchpad_engine();

    /** Returns the attributes. */
    public native @ByVal primitive_attr get_primitive_attr();
}
